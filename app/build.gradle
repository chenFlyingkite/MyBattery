apply plugin: 'com.android.application'

def libraryVersion = "28.0.0"
def googlePlayVersion = "9.8.0"

task MyBuildInfo {
    ext.versionCode = 7
    ext.versionName = "1.0.0.7"
    ext.APK_NAME = "MyBattery-${versionName}.apk"
}

android {
    signingConfigs {
        config {
            keyAlias 'MyAndroidKey'
            keyPassword 'MyAndroid'
            storeFile file('../../KeyStores/chenflyingkite.jks')
            storePassword 'MyAndroid'
        }
    }
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.flyingkite.mybattery"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode MyBuildInfo.versionCode
        versionName MyBuildInfo.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.config
        }
    }

    // See this for options
    // http://tools.android.com/tips/lint-checks
    lintOptions {
        warning 'MissingTranslation'
        ignore  'ContentDescription', 'SpUsage'
        ignore  'RtlCompat', 'RtlEnabled', 'RtlHardcoded', 'RtlSymmetry'
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    project.gradle.addListener(new TaskTicTac())
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$libraryVersion"
    //implementation "com.android.support:design:$libraryVersion"
    //implementation "com.android.support:percent:$libraryVersion"
    //implementation "com.android.support:recyclerview-v7:$libraryVersion"

    def supportLibVersion = "27.1.1"
    //implementation "com.android.support:support-compat:$supportLibVersion"
    //implementation 'com.github.chenFlyingkite:MyAndroid:0.0.3'
    //implementation 'com.android.support.constraint:constraint-layout:1.0.2'
}


android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    variant.assemble.doFirst {
        println "[applicationVariants.all] ${variant.name}"
    }
    if (buildType == "release") {
        variant.assemble.doLast {
            variant.outputs.all { output ->
                println "[assemble.doLast] copy" +
                    "\n    from(${output.outputFile})" +
                    "\n    into(${rootDir}/apks-${buildType})" +
                    "\n    rename(${MyBuildInfo.APK_NAME})"
                copy {
                    from output.outputFile
                    into "${rootDir}/apks-${buildType}"
                    rename '(.*)', MyBuildInfo.APK_NAME
                }
            }
//            if (variant.getBuildType().isMinifyEnabled()) {
//                println "[assemble.doLast] copy from(${variant.mappingFile}) into(${buildType}) rename(${makeInfo.MAPPING})"
//                copy {
//                    from variant.mappingFile
//                    into "${rootDir}/${buildType}"
//                    rename '(.*)', makeInfo.MAPPING
//                }
//            }
        }
    }
}


// BuildAdapter is simple listener for BuildListener
// TaskExecutionAdapter is simple listener for TaskExecutionListener
class TaskTicTac extends BuildAdapter implements TaskExecutionListener {
    private TicTac clock = new TicTac()
    private times = []
    private everSlow = false
    private final SLOW = 3000

    @Override
    void beforeExecute(Task task) {
        clock.tic()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        long ms = clock.tacL()
        if (!everSlow) {
            everSlow = ms >= SLOW
        }
        times.add([ms, task.path])
    }

    @Override
    void buildFinished(BuildResult result) {
        if (!everSlow) return

        printf "---- TaskTicTac ---- (All %s tasks)\n", times.size()
        printf "Tasks spend time >= %s ms:\n", SLOW
        for (time in times) {
            if (time[0] >= SLOW) {
                printf "%10.03f s  %s\n", time[0] * 0.001, time[1]
            }
        }
        println "--------"
    }
}


class TicTac {
    private Stack<Long> tictac = new Stack<>()

    void reset() {
        tictac.clear()
    }

    long tic() {
        long tic = System.currentTimeMillis()
        tictac.push(tic)
        return tic
    }

    long tacL() {
        long tac = System.currentTimeMillis()
        if (tictac.size() < 1) {
            logError(tac, "")
            return -1
        } else {
            long tic = tictac.pop()
            return tac - tic
        }
    }

    void tac() {
        long tac = System.currentTimeMillis()

        if (tictac.size() < 1) {
            logError(tac, msg)
        } else {
            long tic = tictac.pop()
            StringBuilder s = new StringBuilder()
            int n = tictac.size()

            for(int i = 0; i < n; ++i) {
                s.append(" ")
            }

            s.append("[").append(tac - tic).append("] : ").append(msg)
            logTac(s.toString())
        }
    }

    void logTac(String s) {
        printf "Hi, $s\n"
    }

    void logError(long tac, String msg) {
        printf "Hi, X_X [tic = N/A, tac = $tac] : $msg\n"
    }
}